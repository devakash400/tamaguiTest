import { objectFromEntries, objectKeys } from "./helpers";
import { colorTokens } from "./tokens";
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _array_without_holes(arr) {
  if (Array.isArray(arr))
    return _array_like_to_array(arr);
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _iterable_to_array(iter) {
  if (typeof Symbol < "u" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _non_iterable_spread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function _to_consumable_array(arr) {
  return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string")
      return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set")
      return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _array_like_to_array(o, minLen);
  }
}
var palettes = function() {
  var lightTransparent = "rgba(255,255,255,0)", darkTransparent = "rgba(10,10,10,0)", transparent = function(hsl) {
    var opacity = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    return hsl.replace("%)", "%, ".concat(opacity, ")")).replace("hsl(", "hsla(");
  }, getColorPalette = function(colors) {
    var color = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : colors[0], colorPalette = Object.values(colors), _ref = [
      colorPalette.slice(0, 6),
      colorPalette.slice(colorPalette.length - 5)
    ], head = _ref[0], tail = _ref[1];
    return [
      transparent(colorPalette[0])
    ].concat(_to_consumable_array(head), _to_consumable_array(tail), [
      color,
      transparent(colorPalette[colorPalette.length - 1])
    ]);
  }, lightColor = "hsl(0, 0%, 9.0%)", lightPalette = [
    lightTransparent,
    "#fff",
    "#f8f8f8",
    "hsl(0, 0%, 96.3%)",
    "hsl(0, 0%, 94.1%)",
    "hsl(0, 0%, 92.0%)",
    "hsl(0, 0%, 90.0%)",
    "hsl(0, 0%, 88.5%)",
    "hsl(0, 0%, 81.0%)",
    "hsl(0, 0%, 56.1%)",
    "hsl(0, 0%, 50.3%)",
    "hsl(0, 0%, 42.5%)",
    lightColor,
    darkTransparent
  ], darkColor = "#fff", darkPalette = [
    darkTransparent,
    "#050505",
    "#151515",
    "#191919",
    "#232323",
    "#282828",
    "#323232",
    "#424242",
    "#494949",
    "#545454",
    "#626262",
    "#a5a5a5",
    darkColor,
    lightTransparent
  ], lightPalettes = objectFromEntries(objectKeys(colorTokens.light).map(function(key) {
    return [
      "light_".concat(key),
      getColorPalette(colorTokens.light[key], lightColor)
    ];
  })), darkPalettes = objectFromEntries(objectKeys(colorTokens.dark).map(function(key) {
    return [
      "dark_".concat(key),
      getColorPalette(colorTokens.dark[key], darkColor)
    ];
  })), colorPalettes = _object_spread({}, lightPalettes, darkPalettes);
  return _object_spread({
    light: lightPalette,
    dark: darkPalette
  }, colorPalettes);
}();
export {
  palettes
};
//# sourceMappingURL=palettes.js.map
