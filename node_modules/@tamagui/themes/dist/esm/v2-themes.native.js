import { createThemeBuilder } from "@tamagui/theme-builder";
import { blue, blueDark, gray, grayDark, green, greenDark, orange, orangeDark, pink, pinkDark, purple, purpleDark, red, redDark, yellow, yellowDark } from "@tamagui/colors";
import { createTokens } from "@tamagui/web";
import { masks } from "./masks";
import { masks as masks2 } from "./masks";
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _array_with_holes(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _array_without_holes(arr) {
  if (Array.isArray(arr))
    return _array_like_to_array(arr);
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _iterable_to_array(iter) {
  if (typeof Symbol < "u" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _iterable_to_array_limit(arr, i) {
  var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _arr = [], _n = !0, _d = !1, _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i && _arr.length === i)); _n = !0)
        ;
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        !_n && _i.return != null && _i.return();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
}
function _non_iterable_rest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _non_iterable_spread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
function _sliced_to_array(arr, i) {
  return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _to_consumable_array(arr) {
  return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string")
      return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set")
      return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _array_like_to_array(o, minLen);
  }
}
var colorTokens = {
  light: {
    blue,
    gray,
    green,
    orange,
    pink,
    purple,
    red,
    yellow
  },
  dark: {
    blue: blueDark,
    gray: grayDark,
    green: greenDark,
    orange: orangeDark,
    pink: pinkDark,
    purple: purpleDark,
    red: redDark,
    yellow: yellowDark
  }
}, palettes = function() {
  var lightTransparent = "rgba(255,255,255,0)", darkTransparent = "rgba(10,10,10,0)", transparent = function(hsl) {
    var opacity = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    return hsl.replace("%)", "%, ".concat(opacity, ")")).replace("hsl(", "hsla(");
  }, getColorPalette = function(colors) {
    var color2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : colors[0], colorPalette = Object.values(colors), _ref = [
      colorPalette.slice(0, 6),
      colorPalette.slice(colorPalette.length - 5)
    ], head = _ref[0], tail = _ref[1];
    return [
      transparent(colorPalette[0])
    ].concat(_to_consumable_array(head), _to_consumable_array(tail), [
      color2,
      transparent(colorPalette[colorPalette.length - 1])
    ]);
  }, lightColor = "hsl(0, 0%, 9.0%)", lightPalette = [
    lightTransparent,
    "#fff",
    "#f8f8f8",
    "hsl(0, 0%, 96.3%)",
    "hsl(0, 0%, 94.1%)",
    "hsl(0, 0%, 92.0%)",
    "hsl(0, 0%, 90.0%)",
    "hsl(0, 0%, 88.5%)",
    "hsl(0, 0%, 81.0%)",
    "hsl(0, 0%, 56.1%)",
    "hsl(0, 0%, 50.3%)",
    "hsl(0, 0%, 42.5%)",
    lightColor,
    darkTransparent
  ], darkColor = "#fff", darkPalette = [
    darkTransparent,
    "#050505",
    "#151515",
    "#191919",
    "#232323",
    "#282828",
    "#323232",
    "#424242",
    "#494949",
    "#545454",
    "#626262",
    "#a5a5a5",
    darkColor,
    lightTransparent
  ], lightPalettes = objectFromEntries(objectKeys(colorTokens.light).map(function(key) {
    return [
      "light_".concat(key),
      getColorPalette(colorTokens.light[key], lightColor)
    ];
  })), darkPalettes = objectFromEntries(objectKeys(colorTokens.dark).map(function(key) {
    return [
      "dark_".concat(key),
      getColorPalette(colorTokens.dark[key], darkColor)
    ];
  })), colorPalettes = _object_spread({}, lightPalettes, darkPalettes);
  return _object_spread({
    light: lightPalette,
    dark: darkPalette
  }, colorPalettes);
}(), templateColorsSpecific = {
  color1: 1,
  color2: 2,
  color3: 3,
  color4: 4,
  color5: 5,
  color6: 6,
  color7: 7,
  color8: 8,
  color9: 9,
  color10: 10,
  color11: 11,
  color12: 12
}, templates = function() {
  var template = _object_spread_props(_object_spread({}, templateColorsSpecific), {
    // the background, color, etc keys here work like generics - they make it so you
    // can publish components for others to use without mandating a specific color scale
    // the @tamagui/button Button component looks for `$background`, so you set the
    // dark_red_Button theme to have a stronger background than the dark_red theme.
    background: 2,
    backgroundHover: 3,
    backgroundPress: 4,
    backgroundFocus: 5,
    backgroundStrong: 1,
    backgroundTransparent: 0,
    color: -1,
    colorHover: -2,
    colorPress: -1,
    colorFocus: -2,
    colorTransparent: -0,
    borderColor: 5,
    borderColorHover: 6,
    borderColorFocus: 4,
    borderColorPress: 5,
    placeholderColor: -4,
    // in the future this should be partially transparent
    outlineColor: 5
  });
  return {
    base: template,
    colorLight: _object_spread_props(_object_spread({}, template), {
      // light color themes are a bit less sensitive
      borderColor: 4,
      borderColorHover: 5,
      borderColorFocus: 4,
      borderColorPress: 4
    })
  };
}(), maskOptions = function() {
  var shadows2 = {
    shadowColor: 0,
    shadowColorHover: 0,
    shadowColorPress: 0,
    shadowColorFocus: 0
  }, colors = _object_spread_props(_object_spread({}, shadows2), {
    color: 0,
    colorHover: 0,
    colorFocus: 0,
    colorPress: 0
  }), baseMaskOptions = {
    override: shadows2,
    skip: shadows2,
    // avoids the transparent ends
    max: palettes.light.length - 2,
    min: 1
  }, skipShadowsAndSpecificColors = _object_spread({}, shadows2, templateColorsSpecific);
  return {
    component: _object_spread_props(_object_spread({}, baseMaskOptions), {
      override: colors,
      skip: skipShadowsAndSpecificColors
    }),
    alt: _object_spread({}, baseMaskOptions),
    button: _object_spread_props(_object_spread({}, baseMaskOptions), {
      override: _object_spread_props(_object_spread({}, colors), {
        borderColor: "transparent",
        borderColorHover: "transparent"
      }),
      skip: skipShadowsAndSpecificColors
    })
  };
}(), lightShadowColor = "rgba(0,0,0,0.04)", lightShadowColorStrong = "rgba(0,0,0,0.085)", darkShadowColor = "rgba(0,0,0,0.2)", darkShadowColorStrong = "rgba(0,0,0,0.3)", size = {
  $0: 0,
  "$0.25": 2,
  "$0.5": 4,
  "$0.75": 8,
  $1: 20,
  "$1.5": 24,
  $2: 28,
  "$2.5": 32,
  $3: 36,
  "$3.5": 40,
  $4: 44,
  $true: 44,
  "$4.5": 48,
  $5: 52,
  $6: 64,
  $7: 74,
  $8: 84,
  $9: 94,
  $10: 104,
  $11: 124,
  $12: 144,
  $13: 164,
  $14: 184,
  $15: 204,
  $16: 224,
  $17: 224,
  $18: 244,
  $19: 264,
  $20: 284
}, spaces = Object.entries(size).map(function(param) {
  var _param = _sliced_to_array(param, 2), k = _param[0], v = _param[1];
  return [
    k,
    sizeToSpace(v)
  ];
}), spacesNegative = spaces.slice(1).map(function(param) {
  var _param = _sliced_to_array(param, 2), k = _param[0], v = _param[1];
  return [
    "-".concat(k.slice(1)),
    -v
  ];
}), space = _object_spread({}, Object.fromEntries(spaces), Object.fromEntries(spacesNegative)), zIndex = {
  0: 0,
  1: 100,
  2: 200,
  3: 300,
  4: 400,
  5: 500
}, darkColors = _object_spread({}, colorTokens.dark.blue, colorTokens.dark.gray, colorTokens.dark.green, colorTokens.dark.orange, colorTokens.dark.pink, colorTokens.dark.purple, colorTokens.dark.red, colorTokens.dark.yellow), lightColors = _object_spread({}, colorTokens.light.blue, colorTokens.light.gray, colorTokens.light.green, colorTokens.light.orange, colorTokens.light.pink, colorTokens.light.purple, colorTokens.light.red, colorTokens.light.yellow), color = _object_spread({}, postfixObjKeys(lightColors, "Light"), postfixObjKeys(darkColors, "Dark")), radius = {
  0: 0,
  1: 3,
  2: 5,
  3: 7,
  4: 9,
  true: 9,
  5: 10,
  6: 16,
  7: 19,
  8: 22,
  9: 26,
  10: 34,
  11: 42,
  12: 50
}, tokens = createTokens({
  color,
  radius,
  zIndex,
  space,
  size
}), shadows = {
  light: {
    shadowColor: lightShadowColorStrong,
    shadowColorHover: lightShadowColorStrong,
    shadowColorPress: lightShadowColor,
    shadowColorFocus: lightShadowColor
  },
  dark: {
    shadowColor: darkShadowColorStrong,
    shadowColorHover: darkShadowColorStrong,
    shadowColorPress: darkShadowColor,
    shadowColorFocus: darkShadowColor
  }
}, colorThemeDefinition = function(colorName) {
  return [
    {
      parent: "light",
      palette: colorName,
      template: "colorLight"
    },
    {
      parent: "dark",
      palette: colorName,
      template: "base"
    }
  ];
}, nonInherited = {
  light: _object_spread({}, lightColors, shadows.light),
  dark: _object_spread({}, darkColors, shadows.dark)
}, overlayThemeDefinitions = [
  {
    parent: "light",
    theme: {
      background: "rgba(0,0,0,0.5)"
    }
  },
  {
    parent: "dark",
    theme: {
      background: "rgba(0,0,0,0.9)"
    }
  }
], themeBuilder = createThemeBuilder().addPalettes(palettes).addTemplates(templates).addMasks(masks).addThemes({
  light: {
    template: "base",
    palette: "light",
    nonInheritedValues: nonInherited.light
  },
  dark: {
    template: "base",
    palette: "dark",
    nonInheritedValues: nonInherited.dark
  }
}).addChildThemes({
  orange: colorThemeDefinition("orange"),
  yellow: colorThemeDefinition("yellow"),
  green: colorThemeDefinition("green"),
  blue: colorThemeDefinition("blue"),
  purple: colorThemeDefinition("purple"),
  pink: colorThemeDefinition("pink"),
  red: colorThemeDefinition("red"),
  gray: colorThemeDefinition("gray")
}).addChildThemes({
  alt1: _object_spread({
    mask: "soften"
  }, maskOptions.alt),
  alt2: _object_spread({
    mask: "soften2Border1"
  }, maskOptions.alt),
  active: {
    mask: "soften3FlatBorder",
    skip: {
      color: 1
    }
  }
}).addChildThemes({
  ListItem: [
    _object_spread({
      parent: "light",
      avoidNestingWithin: [
        "active"
      ],
      mask: "identity"
    }, maskOptions.component),
    _object_spread({
      parent: "dark",
      avoidNestingWithin: [
        "active"
      ],
      mask: "identity"
    }, maskOptions.component)
  ],
  Card: _object_spread({
    mask: "soften",
    avoidNestingWithin: [
      "active"
    ]
  }, maskOptions.component),
  Button: _object_spread({
    mask: "soften2Border1"
  }, maskOptions.component),
  Checkbox: _object_spread({
    mask: "softenBorder2"
  }, maskOptions.component),
  Switch: _object_spread({
    mask: "soften2Border1"
  }, maskOptions.component),
  SwitchThumb: _object_spread({
    mask: "inverseStrengthen2",
    avoidNestingWithin: [
      "active"
    ]
  }, maskOptions.component),
  TooltipContent: _object_spread({
    mask: "soften2Border1",
    avoidNestingWithin: [
      "active"
    ]
  }, maskOptions.component),
  DrawerFrame: _object_spread({
    mask: "soften",
    avoidNestingWithin: [
      "active"
    ]
  }, maskOptions.component),
  Progress: _object_spread({
    mask: "soften",
    avoidNestingWithin: [
      "active"
    ]
  }, maskOptions.component),
  RadioGroupItem: _object_spread({
    mask: "softenBorder2",
    avoidNestingWithin: [
      "active"
    ]
  }, maskOptions.component),
  TooltipArrow: _object_spread({
    mask: "soften",
    avoidNestingWithin: [
      "active"
    ]
  }, maskOptions.component),
  SliderTrackActive: _object_spread({
    mask: "inverseSoften"
  }, maskOptions.component),
  SliderTrack: _object_spread({
    mask: "soften2Border1",
    avoidNestingWithin: [
      "active"
    ]
  }, maskOptions.component),
  SliderThumb: _object_spread({
    mask: "inverse",
    avoidNestingWithin: [
      "active"
    ]
  }, maskOptions.component),
  Tooltip: _object_spread({
    mask: "inverse",
    avoidNestingWithin: [
      "active"
    ]
  }, maskOptions.component),
  ProgressIndicator: _object_spread({
    mask: "inverse",
    avoidNestingWithin: [
      "active"
    ]
  }, maskOptions.component),
  SheetOverlay: overlayThemeDefinitions,
  DialogOverlay: overlayThemeDefinitions,
  ModalOverlay: overlayThemeDefinitions,
  Input: _object_spread({
    mask: "softenBorder2"
  }, maskOptions.component),
  TextArea: _object_spread({
    mask: "softenBorder2"
  }, maskOptions.component)
}, {}), themesIn = themeBuilder.build(), themes = themesIn;
function postfixObjKeys(obj, postfix) {
  return Object.fromEntries(Object.entries(obj).map(function(param) {
    var _param = _sliced_to_array(param, 2), k = _param[0], v = _param[1];
    return [
      "".concat(k).concat(postfix),
      v
    ];
  }));
}
function sizeToSpace(v) {
  return v === 0 ? 0 : v === 2 ? 0.5 : v === 4 ? 1 : v === 8 ? 1.5 : v <= 16 ? Math.round(v * 0.333) : Math.floor(v * 0.7 - 12);
}
function objectFromEntries(arr) {
  return Object.fromEntries(arr);
}
function objectKeys(obj) {
  return Object.keys(obj);
}
export {
  maskOptions,
  masks2 as masks,
  palettes,
  templates,
  themes,
  tokens
};
//# sourceMappingURL=v2-themes.js.map
